/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API generated with [binance/binance-api-swagger/blob/master/spot_api.yaml](https://github.com/binance/binance-api-swagger/blob/master/spot_api.yaml) with commit [v1.2.0 release](https://github.com/binance/binance-api-swagger/commit/60d14be031c031600c853d5cdab86db5ab73603e)  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
Contact: qishiwenjun@163.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binanceapi

import (
	"encoding/json"
)

// InlineResponse200104 struct for InlineResponse200104
type InlineResponse200104 struct {
	PoolId     int64                         `json:"poolId"`
	PoolNmae   string                        `json:"poolNmae"`
	UpdateTime int64                         `json:"updateTime"`
	Liquidity  SapiV1BswapLiquidityLiquidity `json:"liquidity"`
	Share      SapiV1BswapLiquidityShare     `json:"share"`
}

// NewInlineResponse200104 instantiates a new InlineResponse200104 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200104(poolId int64, poolNmae string, updateTime int64, liquidity SapiV1BswapLiquidityLiquidity, share SapiV1BswapLiquidityShare) *InlineResponse200104 {
	this := InlineResponse200104{}
	this.PoolId = poolId
	this.PoolNmae = poolNmae
	this.UpdateTime = updateTime
	this.Liquidity = liquidity
	this.Share = share
	return &this
}

// NewInlineResponse200104WithDefaults instantiates a new InlineResponse200104 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200104WithDefaults() *InlineResponse200104 {
	this := InlineResponse200104{}
	return &this
}

// GetPoolId returns the PoolId field value
func (o *InlineResponse200104) GetPoolId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200104) GetPoolIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolId, true
}

// SetPoolId sets field value
func (o *InlineResponse200104) SetPoolId(v int64) {
	o.PoolId = v
}

// GetPoolNmae returns the PoolNmae field value
func (o *InlineResponse200104) GetPoolNmae() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolNmae
}

// GetPoolNmaeOk returns a tuple with the PoolNmae field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200104) GetPoolNmaeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PoolNmae, true
}

// SetPoolNmae sets field value
func (o *InlineResponse200104) SetPoolNmae(v string) {
	o.PoolNmae = v
}

// GetUpdateTime returns the UpdateTime field value
func (o *InlineResponse200104) GetUpdateTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200104) GetUpdateTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateTime, true
}

// SetUpdateTime sets field value
func (o *InlineResponse200104) SetUpdateTime(v int64) {
	o.UpdateTime = v
}

// GetLiquidity returns the Liquidity field value
func (o *InlineResponse200104) GetLiquidity() SapiV1BswapLiquidityLiquidity {
	if o == nil {
		var ret SapiV1BswapLiquidityLiquidity
		return ret
	}

	return o.Liquidity
}

// GetLiquidityOk returns a tuple with the Liquidity field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200104) GetLiquidityOk() (*SapiV1BswapLiquidityLiquidity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Liquidity, true
}

// SetLiquidity sets field value
func (o *InlineResponse200104) SetLiquidity(v SapiV1BswapLiquidityLiquidity) {
	o.Liquidity = v
}

// GetShare returns the Share field value
func (o *InlineResponse200104) GetShare() SapiV1BswapLiquidityShare {
	if o == nil {
		var ret SapiV1BswapLiquidityShare
		return ret
	}

	return o.Share
}

// GetShareOk returns a tuple with the Share field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200104) GetShareOk() (*SapiV1BswapLiquidityShare, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Share, true
}

// SetShare sets field value
func (o *InlineResponse200104) SetShare(v SapiV1BswapLiquidityShare) {
	o.Share = v
}

func (o InlineResponse200104) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["poolId"] = o.PoolId
	}
	if true {
		toSerialize["poolNmae"] = o.PoolNmae
	}
	if true {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if true {
		toSerialize["liquidity"] = o.Liquidity
	}
	if true {
		toSerialize["share"] = o.Share
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200104 struct {
	value *InlineResponse200104
	isSet bool
}

func (v NullableInlineResponse200104) Get() *InlineResponse200104 {
	return v.value
}

func (v *NullableInlineResponse200104) Set(val *InlineResponse200104) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200104) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200104) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200104(val *InlineResponse200104) *NullableInlineResponse200104 {
	return &NullableInlineResponse200104{value: val, isSet: true}
}

func (v NullableInlineResponse200104) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200104) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
