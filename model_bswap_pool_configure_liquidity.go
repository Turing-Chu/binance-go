/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API generated with [binance/binance-api-swagger/blob/master/spot_api.yaml](https://github.com/binance/binance-api-swagger/blob/master/spot_api.yaml) with commit [v1.2.0 release](https://github.com/binance/binance-api-swagger/commit/60d14be031c031600c853d5cdab86db5ab73603e)  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
Contact: qishiwenjun@163.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binanceapi

import (
	"encoding/json"
)

// BswapPoolConfigureLiquidity struct for BswapPoolConfigureLiquidity
type BswapPoolConfigureLiquidity struct {
	// \"NA\" if pool is an innovation pool
	ConstantA      int64   `json:"constantA"`
	MinRedeemShare float64 `json:"minRedeemShare"`
	// The swap proceeds only when the slippage is within the set range
	SlippageTolerance float64 `json:"slippageTolerance"`
}

// NewBswapPoolConfigureLiquidity instantiates a new BswapPoolConfigureLiquidity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBswapPoolConfigureLiquidity(constantA int64, minRedeemShare float64, slippageTolerance float64) *BswapPoolConfigureLiquidity {
	this := BswapPoolConfigureLiquidity{}
	this.ConstantA = constantA
	this.MinRedeemShare = minRedeemShare
	this.SlippageTolerance = slippageTolerance
	return &this
}

// NewBswapPoolConfigureLiquidityWithDefaults instantiates a new BswapPoolConfigureLiquidity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBswapPoolConfigureLiquidityWithDefaults() *BswapPoolConfigureLiquidity {
	this := BswapPoolConfigureLiquidity{}
	return &this
}

// GetConstantA returns the ConstantA field value
func (o *BswapPoolConfigureLiquidity) GetConstantA() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ConstantA
}

// GetConstantAOk returns a tuple with the ConstantA field value
// and a boolean to check if the value has been set.
func (o *BswapPoolConfigureLiquidity) GetConstantAOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConstantA, true
}

// SetConstantA sets field value
func (o *BswapPoolConfigureLiquidity) SetConstantA(v int64) {
	o.ConstantA = v
}

// GetMinRedeemShare returns the MinRedeemShare field value
func (o *BswapPoolConfigureLiquidity) GetMinRedeemShare() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MinRedeemShare
}

// GetMinRedeemShareOk returns a tuple with the MinRedeemShare field value
// and a boolean to check if the value has been set.
func (o *BswapPoolConfigureLiquidity) GetMinRedeemShareOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinRedeemShare, true
}

// SetMinRedeemShare sets field value
func (o *BswapPoolConfigureLiquidity) SetMinRedeemShare(v float64) {
	o.MinRedeemShare = v
}

// GetSlippageTolerance returns the SlippageTolerance field value
func (o *BswapPoolConfigureLiquidity) GetSlippageTolerance() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.SlippageTolerance
}

// GetSlippageToleranceOk returns a tuple with the SlippageTolerance field value
// and a boolean to check if the value has been set.
func (o *BswapPoolConfigureLiquidity) GetSlippageToleranceOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SlippageTolerance, true
}

// SetSlippageTolerance sets field value
func (o *BswapPoolConfigureLiquidity) SetSlippageTolerance(v float64) {
	o.SlippageTolerance = v
}

func (o BswapPoolConfigureLiquidity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["constantA"] = o.ConstantA
	}
	if true {
		toSerialize["minRedeemShare"] = o.MinRedeemShare
	}
	if true {
		toSerialize["slippageTolerance"] = o.SlippageTolerance
	}
	return json.Marshal(toSerialize)
}

type NullableBswapPoolConfigureLiquidity struct {
	value *BswapPoolConfigureLiquidity
	isSet bool
}

func (v NullableBswapPoolConfigureLiquidity) Get() *BswapPoolConfigureLiquidity {
	return v.value
}

func (v *NullableBswapPoolConfigureLiquidity) Set(val *BswapPoolConfigureLiquidity) {
	v.value = val
	v.isSet = true
}

func (v NullableBswapPoolConfigureLiquidity) IsSet() bool {
	return v.isSet
}

func (v *NullableBswapPoolConfigureLiquidity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBswapPoolConfigureLiquidity(val *BswapPoolConfigureLiquidity) *NullableBswapPoolConfigureLiquidity {
	return &NullableBswapPoolConfigureLiquidity{value: val, isSet: true}
}

func (v NullableBswapPoolConfigureLiquidity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBswapPoolConfigureLiquidity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
