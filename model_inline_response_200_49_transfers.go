/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse20049Transfers struct for InlineResponse20049Transfers
type InlineResponse20049Transfers struct {
	From string `json:"from"`
	To string `json:"to"`
	Asset string `json:"asset"`
	Qty string `json:"qty"`
	TranId int64 `json:"tranId"`
	Time int64 `json:"time"`
}

// NewInlineResponse20049Transfers instantiates a new InlineResponse20049Transfers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20049Transfers(from string, to string, asset string, qty string, tranId int64, time int64) *InlineResponse20049Transfers {
	this := InlineResponse20049Transfers{}
	this.From = from
	this.To = to
	this.Asset = asset
	this.Qty = qty
	this.TranId = tranId
	this.Time = time
	return &this
}

// NewInlineResponse20049TransfersWithDefaults instantiates a new InlineResponse20049Transfers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20049TransfersWithDefaults() *InlineResponse20049Transfers {
	this := InlineResponse20049Transfers{}
	return &this
}

// GetFrom returns the From field value
func (o *InlineResponse20049Transfers) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20049Transfers) GetFromOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *InlineResponse20049Transfers) SetFrom(v string) {
	o.From = v
}

// GetTo returns the To field value
func (o *InlineResponse20049Transfers) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20049Transfers) GetToOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *InlineResponse20049Transfers) SetTo(v string) {
	o.To = v
}

// GetAsset returns the Asset field value
func (o *InlineResponse20049Transfers) GetAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Asset
}

// GetAssetOk returns a tuple with the Asset field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20049Transfers) GetAssetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Asset, true
}

// SetAsset sets field value
func (o *InlineResponse20049Transfers) SetAsset(v string) {
	o.Asset = v
}

// GetQty returns the Qty field value
func (o *InlineResponse20049Transfers) GetQty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Qty
}

// GetQtyOk returns a tuple with the Qty field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20049Transfers) GetQtyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Qty, true
}

// SetQty sets field value
func (o *InlineResponse20049Transfers) SetQty(v string) {
	o.Qty = v
}

// GetTranId returns the TranId field value
func (o *InlineResponse20049Transfers) GetTranId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TranId
}

// GetTranIdOk returns a tuple with the TranId field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20049Transfers) GetTranIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TranId, true
}

// SetTranId sets field value
func (o *InlineResponse20049Transfers) SetTranId(v int64) {
	o.TranId = v
}

// GetTime returns the Time field value
func (o *InlineResponse20049Transfers) GetTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20049Transfers) GetTimeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *InlineResponse20049Transfers) SetTime(v int64) {
	o.Time = v
}

func (o InlineResponse20049Transfers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["from"] = o.From
	}
	if true {
		toSerialize["to"] = o.To
	}
	if true {
		toSerialize["asset"] = o.Asset
	}
	if true {
		toSerialize["qty"] = o.Qty
	}
	if true {
		toSerialize["tranId"] = o.TranId
	}
	if true {
		toSerialize["time"] = o.Time
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20049Transfers struct {
	value *InlineResponse20049Transfers
	isSet bool
}

func (v NullableInlineResponse20049Transfers) Get() *InlineResponse20049Transfers {
	return v.value
}

func (v *NullableInlineResponse20049Transfers) Set(val *InlineResponse20049Transfers) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20049Transfers) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20049Transfers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20049Transfers(val *InlineResponse20049Transfers) *NullableInlineResponse20049Transfers {
	return &NullableInlineResponse20049Transfers{value: val, isSet: true}
}

func (v NullableInlineResponse20049Transfers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20049Transfers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


