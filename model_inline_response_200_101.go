/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse200101 struct for InlineResponse200101
type InlineResponse200101 struct {
	Id float64 `json:"id"`
	TokenName string `json:"tokenName"`
	// Redemption amount
	Amount string `json:"amount"`
	// NAV of redemption
	Nav string `json:"nav"`
	// Reemption fee
	Fee string `json:"fee"`
	// Net redemption value in usdt
	NetProceed string `json:"netProceed"`
	Timestamp int64 `json:"timestamp"`
}

// NewInlineResponse200101 instantiates a new InlineResponse200101 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse200101(id float64, tokenName string, amount string, nav string, fee string, netProceed string, timestamp int64) *InlineResponse200101 {
	this := InlineResponse200101{}
	this.Id = id
	this.TokenName = tokenName
	this.Amount = amount
	this.Nav = nav
	this.Fee = fee
	this.NetProceed = netProceed
	this.Timestamp = timestamp
	return &this
}

// NewInlineResponse200101WithDefaults instantiates a new InlineResponse200101 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse200101WithDefaults() *InlineResponse200101 {
	this := InlineResponse200101{}
	return &this
}

// GetId returns the Id field value
func (o *InlineResponse200101) GetId() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200101) GetIdOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InlineResponse200101) SetId(v float64) {
	o.Id = v
}

// GetTokenName returns the TokenName field value
func (o *InlineResponse200101) GetTokenName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenName
}

// GetTokenNameOk returns a tuple with the TokenName field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200101) GetTokenNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TokenName, true
}

// SetTokenName sets field value
func (o *InlineResponse200101) SetTokenName(v string) {
	o.TokenName = v
}

// GetAmount returns the Amount field value
func (o *InlineResponse200101) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200101) GetAmountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *InlineResponse200101) SetAmount(v string) {
	o.Amount = v
}

// GetNav returns the Nav field value
func (o *InlineResponse200101) GetNav() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Nav
}

// GetNavOk returns a tuple with the Nav field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200101) GetNavOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Nav, true
}

// SetNav sets field value
func (o *InlineResponse200101) SetNav(v string) {
	o.Nav = v
}

// GetFee returns the Fee field value
func (o *InlineResponse200101) GetFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200101) GetFeeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *InlineResponse200101) SetFee(v string) {
	o.Fee = v
}

// GetNetProceed returns the NetProceed field value
func (o *InlineResponse200101) GetNetProceed() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NetProceed
}

// GetNetProceedOk returns a tuple with the NetProceed field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200101) GetNetProceedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NetProceed, true
}

// SetNetProceed sets field value
func (o *InlineResponse200101) SetNetProceed(v string) {
	o.NetProceed = v
}

// GetTimestamp returns the Timestamp field value
func (o *InlineResponse200101) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *InlineResponse200101) GetTimestampOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *InlineResponse200101) SetTimestamp(v int64) {
	o.Timestamp = v
}

func (o InlineResponse200101) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["tokenName"] = o.TokenName
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["nav"] = o.Nav
	}
	if true {
		toSerialize["fee"] = o.Fee
	}
	if true {
		toSerialize["netProceed"] = o.NetProceed
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse200101 struct {
	value *InlineResponse200101
	isSet bool
}

func (v NullableInlineResponse200101) Get() *InlineResponse200101 {
	return v.value
}

func (v *NullableInlineResponse200101) Set(val *InlineResponse200101) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse200101) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse200101) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse200101(val *InlineResponse200101) *NullableInlineResponse200101 {
	return &NullableInlineResponse200101{value: val, isSet: true}
}

func (v NullableInlineResponse200101) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse200101) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


