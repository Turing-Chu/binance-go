/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API generated with [binance/binance-api-swagger/blob/master/spot_api.yaml](https://github.com/binance/binance-api-swagger/blob/master/spot_api.yaml) with commit [v1.2.0 release](https://github.com/binance/binance-api-swagger/commit/60d14be031c031600c853d5cdab86db5ab73603e)  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
Contact: qishiwenjun@163.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binanceapi

import (
	"encoding/json"
)

// Trade struct for Trade
type Trade struct {
	// trade id
	Id int64 `json:"id"`
	// price
	Price string `json:"price"`
	// amount of base asset
	Qty string `json:"qty"`
	// amount of quote asset
	QuoteQty string `json:"quoteQty"`
	// Trade executed timestamp, as same as `T` in the stream
	Time         int64 `json:"time"`
	IsBuyerMaker bool  `json:"isBuyerMaker"`
	IsBestMatch  bool  `json:"isBestMatch"`
}

// NewTrade instantiates a new Trade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrade(id int64, price string, qty string, quoteQty string, time int64, isBuyerMaker bool, isBestMatch bool) *Trade {
	this := Trade{}
	this.Id = id
	this.Price = price
	this.Qty = qty
	this.QuoteQty = quoteQty
	this.Time = time
	this.IsBuyerMaker = isBuyerMaker
	this.IsBestMatch = isBestMatch
	return &this
}

// NewTradeWithDefaults instantiates a new Trade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradeWithDefaults() *Trade {
	this := Trade{}
	return &this
}

// GetId returns the Id field value
func (o *Trade) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Trade) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Trade) SetId(v int64) {
	o.Id = v
}

// GetPrice returns the Price field value
func (o *Trade) GetPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Trade) GetPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Trade) SetPrice(v string) {
	o.Price = v
}

// GetQty returns the Qty field value
func (o *Trade) GetQty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Qty
}

// GetQtyOk returns a tuple with the Qty field value
// and a boolean to check if the value has been set.
func (o *Trade) GetQtyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Qty, true
}

// SetQty sets field value
func (o *Trade) SetQty(v string) {
	o.Qty = v
}

// GetQuoteQty returns the QuoteQty field value
func (o *Trade) GetQuoteQty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteQty
}

// GetQuoteQtyOk returns a tuple with the QuoteQty field value
// and a boolean to check if the value has been set.
func (o *Trade) GetQuoteQtyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteQty, true
}

// SetQuoteQty sets field value
func (o *Trade) SetQuoteQty(v string) {
	o.QuoteQty = v
}

// GetTime returns the Time field value
func (o *Trade) GetTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *Trade) GetTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *Trade) SetTime(v int64) {
	o.Time = v
}

// GetIsBuyerMaker returns the IsBuyerMaker field value
func (o *Trade) GetIsBuyerMaker() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBuyerMaker
}

// GetIsBuyerMakerOk returns a tuple with the IsBuyerMaker field value
// and a boolean to check if the value has been set.
func (o *Trade) GetIsBuyerMakerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBuyerMaker, true
}

// SetIsBuyerMaker sets field value
func (o *Trade) SetIsBuyerMaker(v bool) {
	o.IsBuyerMaker = v
}

// GetIsBestMatch returns the IsBestMatch field value
func (o *Trade) GetIsBestMatch() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsBestMatch
}

// GetIsBestMatchOk returns a tuple with the IsBestMatch field value
// and a boolean to check if the value has been set.
func (o *Trade) GetIsBestMatchOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsBestMatch, true
}

// SetIsBestMatch sets field value
func (o *Trade) SetIsBestMatch(v bool) {
	o.IsBestMatch = v
}

func (o Trade) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["price"] = o.Price
	}
	if true {
		toSerialize["qty"] = o.Qty
	}
	if true {
		toSerialize["quoteQty"] = o.QuoteQty
	}
	if true {
		toSerialize["time"] = o.Time
	}
	if true {
		toSerialize["isBuyerMaker"] = o.IsBuyerMaker
	}
	if true {
		toSerialize["isBestMatch"] = o.IsBestMatch
	}
	return json.Marshal(toSerialize)
}

type NullableTrade struct {
	value *Trade
	isSet bool
}

func (v NullableTrade) Get() *Trade {
	return v.value
}

func (v *NullableTrade) Set(val *Trade) {
	v.value = val
	v.isSet = true
}

func (v NullableTrade) IsSet() bool {
	return v.isSet
}

func (v *NullableTrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrade(val *Trade) *NullableTrade {
	return &NullableTrade{value: val, isSet: true}
}

func (v NullableTrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
