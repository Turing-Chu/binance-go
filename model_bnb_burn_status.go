/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BnbBurnStatus struct for BnbBurnStatus
type BnbBurnStatus struct {
	SpotBNBBurn bool `json:"spotBNBBurn"`
	InterestBNBBurn bool `json:"interestBNBBurn"`
}

// NewBnbBurnStatus instantiates a new BnbBurnStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBnbBurnStatus(spotBNBBurn bool, interestBNBBurn bool) *BnbBurnStatus {
	this := BnbBurnStatus{}
	this.SpotBNBBurn = spotBNBBurn
	this.InterestBNBBurn = interestBNBBurn
	return &this
}

// NewBnbBurnStatusWithDefaults instantiates a new BnbBurnStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBnbBurnStatusWithDefaults() *BnbBurnStatus {
	this := BnbBurnStatus{}
	return &this
}

// GetSpotBNBBurn returns the SpotBNBBurn field value
func (o *BnbBurnStatus) GetSpotBNBBurn() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SpotBNBBurn
}

// GetSpotBNBBurnOk returns a tuple with the SpotBNBBurn field value
// and a boolean to check if the value has been set.
func (o *BnbBurnStatus) GetSpotBNBBurnOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SpotBNBBurn, true
}

// SetSpotBNBBurn sets field value
func (o *BnbBurnStatus) SetSpotBNBBurn(v bool) {
	o.SpotBNBBurn = v
}

// GetInterestBNBBurn returns the InterestBNBBurn field value
func (o *BnbBurnStatus) GetInterestBNBBurn() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.InterestBNBBurn
}

// GetInterestBNBBurnOk returns a tuple with the InterestBNBBurn field value
// and a boolean to check if the value has been set.
func (o *BnbBurnStatus) GetInterestBNBBurnOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.InterestBNBBurn, true
}

// SetInterestBNBBurn sets field value
func (o *BnbBurnStatus) SetInterestBNBBurn(v bool) {
	o.InterestBNBBurn = v
}

func (o BnbBurnStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["spotBNBBurn"] = o.SpotBNBBurn
	}
	if true {
		toSerialize["interestBNBBurn"] = o.InterestBNBBurn
	}
	return json.Marshal(toSerialize)
}

type NullableBnbBurnStatus struct {
	value *BnbBurnStatus
	isSet bool
}

func (v NullableBnbBurnStatus) Get() *BnbBurnStatus {
	return v.value
}

func (v *NullableBnbBurnStatus) Set(val *BnbBurnStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableBnbBurnStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableBnbBurnStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBnbBurnStatus(val *BnbBurnStatus) *NullableBnbBurnStatus {
	return &NullableBnbBurnStatus{value: val, isSet: true}
}

func (v NullableBnbBurnStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBnbBurnStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


