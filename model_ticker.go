/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API generated with [binance/binance-api-swagger/blob/master/spot_api.yaml](https://github.com/binance/binance-api-swagger/blob/master/spot_api.yaml) with commit [v1.2.0 release](https://github.com/binance/binance-api-swagger/commit/60d14be031c031600c853d5cdab86db5ab73603e)  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
Contact: qishiwenjun@163.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binanceapi

import (
	"encoding/json"
)

// Ticker struct for Ticker
type Ticker struct {
	Symbol             string `json:"symbol"`
	PriceChange        string `json:"priceChange"`
	PriceChangePercent string `json:"priceChangePercent"`
	PrevClosePrice     string `json:"prevClosePrice"`
	LastPrice          string `json:"lastPrice"`
	BidPrice           string `json:"bidPrice"`
	BidQty             string `json:"bidQty"`
	AskPrice           string `json:"askPrice"`
	AskQty             string `json:"askQty"`
	OpenPrice          string `json:"openPrice"`
	HighPrice          string `json:"highPrice"`
	LowPrice           string `json:"lowPrice"`
	Volume             string `json:"volume"`
	QuoteVolume        string `json:"quoteVolume"`
	OpenTime           int64  `json:"openTime"`
	CloseTime          int64  `json:"closeTime"`
	FirstId            int64  `json:"firstId"`
	LastId             int64  `json:"lastId"`
	Count              int64  `json:"count"`
}

// NewTicker instantiates a new Ticker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicker(symbol string, priceChange string, priceChangePercent string, prevClosePrice string, lastPrice string, bidPrice string, bidQty string, askPrice string, askQty string, openPrice string, highPrice string, lowPrice string, volume string, quoteVolume string, openTime int64, closeTime int64, firstId int64, lastId int64, count int64) *Ticker {
	this := Ticker{}
	this.Symbol = symbol
	this.PriceChange = priceChange
	this.PriceChangePercent = priceChangePercent
	this.PrevClosePrice = prevClosePrice
	this.LastPrice = lastPrice
	this.BidPrice = bidPrice
	this.BidQty = bidQty
	this.AskPrice = askPrice
	this.AskQty = askQty
	this.OpenPrice = openPrice
	this.HighPrice = highPrice
	this.LowPrice = lowPrice
	this.Volume = volume
	this.QuoteVolume = quoteVolume
	this.OpenTime = openTime
	this.CloseTime = closeTime
	this.FirstId = firstId
	this.LastId = lastId
	this.Count = count
	return &this
}

// NewTickerWithDefaults instantiates a new Ticker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTickerWithDefaults() *Ticker {
	this := Ticker{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *Ticker) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *Ticker) SetSymbol(v string) {
	o.Symbol = v
}

// GetPriceChange returns the PriceChange field value
func (o *Ticker) GetPriceChange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceChange
}

// GetPriceChangeOk returns a tuple with the PriceChange field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetPriceChangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceChange, true
}

// SetPriceChange sets field value
func (o *Ticker) SetPriceChange(v string) {
	o.PriceChange = v
}

// GetPriceChangePercent returns the PriceChangePercent field value
func (o *Ticker) GetPriceChangePercent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PriceChangePercent
}

// GetPriceChangePercentOk returns a tuple with the PriceChangePercent field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetPriceChangePercentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceChangePercent, true
}

// SetPriceChangePercent sets field value
func (o *Ticker) SetPriceChangePercent(v string) {
	o.PriceChangePercent = v
}

// GetPrevClosePrice returns the PrevClosePrice field value
func (o *Ticker) GetPrevClosePrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrevClosePrice
}

// GetPrevClosePriceOk returns a tuple with the PrevClosePrice field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetPrevClosePriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrevClosePrice, true
}

// SetPrevClosePrice sets field value
func (o *Ticker) SetPrevClosePrice(v string) {
	o.PrevClosePrice = v
}

// GetLastPrice returns the LastPrice field value
func (o *Ticker) GetLastPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastPrice
}

// GetLastPriceOk returns a tuple with the LastPrice field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetLastPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastPrice, true
}

// SetLastPrice sets field value
func (o *Ticker) SetLastPrice(v string) {
	o.LastPrice = v
}

// GetBidPrice returns the BidPrice field value
func (o *Ticker) GetBidPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BidPrice
}

// GetBidPriceOk returns a tuple with the BidPrice field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetBidPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BidPrice, true
}

// SetBidPrice sets field value
func (o *Ticker) SetBidPrice(v string) {
	o.BidPrice = v
}

// GetBidQty returns the BidQty field value
func (o *Ticker) GetBidQty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BidQty
}

// GetBidQtyOk returns a tuple with the BidQty field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetBidQtyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BidQty, true
}

// SetBidQty sets field value
func (o *Ticker) SetBidQty(v string) {
	o.BidQty = v
}

// GetAskPrice returns the AskPrice field value
func (o *Ticker) GetAskPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AskPrice
}

// GetAskPriceOk returns a tuple with the AskPrice field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetAskPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AskPrice, true
}

// SetAskPrice sets field value
func (o *Ticker) SetAskPrice(v string) {
	o.AskPrice = v
}

// GetAskQty returns the AskQty field value
func (o *Ticker) GetAskQty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AskQty
}

// GetAskQtyOk returns a tuple with the AskQty field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetAskQtyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AskQty, true
}

// SetAskQty sets field value
func (o *Ticker) SetAskQty(v string) {
	o.AskQty = v
}

// GetOpenPrice returns the OpenPrice field value
func (o *Ticker) GetOpenPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OpenPrice
}

// GetOpenPriceOk returns a tuple with the OpenPrice field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetOpenPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenPrice, true
}

// SetOpenPrice sets field value
func (o *Ticker) SetOpenPrice(v string) {
	o.OpenPrice = v
}

// GetHighPrice returns the HighPrice field value
func (o *Ticker) GetHighPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HighPrice
}

// GetHighPriceOk returns a tuple with the HighPrice field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetHighPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HighPrice, true
}

// SetHighPrice sets field value
func (o *Ticker) SetHighPrice(v string) {
	o.HighPrice = v
}

// GetLowPrice returns the LowPrice field value
func (o *Ticker) GetLowPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LowPrice
}

// GetLowPriceOk returns a tuple with the LowPrice field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetLowPriceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowPrice, true
}

// SetLowPrice sets field value
func (o *Ticker) SetLowPrice(v string) {
	o.LowPrice = v
}

// GetVolume returns the Volume field value
func (o *Ticker) GetVolume() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetVolumeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Volume, true
}

// SetVolume sets field value
func (o *Ticker) SetVolume(v string) {
	o.Volume = v
}

// GetQuoteVolume returns the QuoteVolume field value
func (o *Ticker) GetQuoteVolume() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteVolume
}

// GetQuoteVolumeOk returns a tuple with the QuoteVolume field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetQuoteVolumeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteVolume, true
}

// SetQuoteVolume sets field value
func (o *Ticker) SetQuoteVolume(v string) {
	o.QuoteVolume = v
}

// GetOpenTime returns the OpenTime field value
func (o *Ticker) GetOpenTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OpenTime
}

// GetOpenTimeOk returns a tuple with the OpenTime field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetOpenTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenTime, true
}

// SetOpenTime sets field value
func (o *Ticker) SetOpenTime(v int64) {
	o.OpenTime = v
}

// GetCloseTime returns the CloseTime field value
func (o *Ticker) GetCloseTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CloseTime
}

// GetCloseTimeOk returns a tuple with the CloseTime field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetCloseTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloseTime, true
}

// SetCloseTime sets field value
func (o *Ticker) SetCloseTime(v int64) {
	o.CloseTime = v
}

// GetFirstId returns the FirstId field value
func (o *Ticker) GetFirstId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FirstId
}

// GetFirstIdOk returns a tuple with the FirstId field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetFirstIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstId, true
}

// SetFirstId sets field value
func (o *Ticker) SetFirstId(v int64) {
	o.FirstId = v
}

// GetLastId returns the LastId field value
func (o *Ticker) GetLastId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastId
}

// GetLastIdOk returns a tuple with the LastId field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetLastIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastId, true
}

// SetLastId sets field value
func (o *Ticker) SetLastId(v int64) {
	o.LastId = v
}

// GetCount returns the Count field value
func (o *Ticker) GetCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *Ticker) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *Ticker) SetCount(v int64) {
	o.Count = v
}

func (o Ticker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["priceChange"] = o.PriceChange
	}
	if true {
		toSerialize["priceChangePercent"] = o.PriceChangePercent
	}
	if true {
		toSerialize["prevClosePrice"] = o.PrevClosePrice
	}
	if true {
		toSerialize["lastPrice"] = o.LastPrice
	}
	if true {
		toSerialize["bidPrice"] = o.BidPrice
	}
	if true {
		toSerialize["bidQty"] = o.BidQty
	}
	if true {
		toSerialize["askPrice"] = o.AskPrice
	}
	if true {
		toSerialize["askQty"] = o.AskQty
	}
	if true {
		toSerialize["openPrice"] = o.OpenPrice
	}
	if true {
		toSerialize["highPrice"] = o.HighPrice
	}
	if true {
		toSerialize["lowPrice"] = o.LowPrice
	}
	if true {
		toSerialize["volume"] = o.Volume
	}
	if true {
		toSerialize["quoteVolume"] = o.QuoteVolume
	}
	if true {
		toSerialize["openTime"] = o.OpenTime
	}
	if true {
		toSerialize["closeTime"] = o.CloseTime
	}
	if true {
		toSerialize["firstId"] = o.FirstId
	}
	if true {
		toSerialize["lastId"] = o.LastId
	}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableTicker struct {
	value *Ticker
	isSet bool
}

func (v NullableTicker) Get() *Ticker {
	return v.value
}

func (v *NullableTicker) Set(val *Ticker) {
	v.value = val
	v.isSet = true
}

func (v NullableTicker) IsSet() bool {
	return v.isSet
}

func (v *NullableTicker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicker(val *Ticker) *NullableTicker {
	return &NullableTicker{value: val, isSet: true}
}

func (v NullableTicker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
