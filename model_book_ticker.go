/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binanceapi

import (
	"encoding/json"
)

// BookTicker struct for BookTicker
type BookTicker struct {
	Symbol string `json:"symbol"`
	BidPrice string `json:"bidPrice"`
	BidQty string `json:"bidQty"`
	AskPrice string `json:"askPrice"`
	AskQty string `json:"askQty"`
}

// NewBookTicker instantiates a new BookTicker object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookTicker(symbol string, bidPrice string, bidQty string, askPrice string, askQty string) *BookTicker {
	this := BookTicker{}
	this.Symbol = symbol
	this.BidPrice = bidPrice
	this.BidQty = bidQty
	this.AskPrice = askPrice
	this.AskQty = askQty
	return &this
}

// NewBookTickerWithDefaults instantiates a new BookTicker object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookTickerWithDefaults() *BookTicker {
	this := BookTicker{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *BookTicker) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *BookTicker) GetSymbolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *BookTicker) SetSymbol(v string) {
	o.Symbol = v
}

// GetBidPrice returns the BidPrice field value
func (o *BookTicker) GetBidPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BidPrice
}

// GetBidPriceOk returns a tuple with the BidPrice field value
// and a boolean to check if the value has been set.
func (o *BookTicker) GetBidPriceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BidPrice, true
}

// SetBidPrice sets field value
func (o *BookTicker) SetBidPrice(v string) {
	o.BidPrice = v
}

// GetBidQty returns the BidQty field value
func (o *BookTicker) GetBidQty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BidQty
}

// GetBidQtyOk returns a tuple with the BidQty field value
// and a boolean to check if the value has been set.
func (o *BookTicker) GetBidQtyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BidQty, true
}

// SetBidQty sets field value
func (o *BookTicker) SetBidQty(v string) {
	o.BidQty = v
}

// GetAskPrice returns the AskPrice field value
func (o *BookTicker) GetAskPrice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AskPrice
}

// GetAskPriceOk returns a tuple with the AskPrice field value
// and a boolean to check if the value has been set.
func (o *BookTicker) GetAskPriceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AskPrice, true
}

// SetAskPrice sets field value
func (o *BookTicker) SetAskPrice(v string) {
	o.AskPrice = v
}

// GetAskQty returns the AskQty field value
func (o *BookTicker) GetAskQty() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AskQty
}

// GetAskQtyOk returns a tuple with the AskQty field value
// and a boolean to check if the value has been set.
func (o *BookTicker) GetAskQtyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AskQty, true
}

// SetAskQty sets field value
func (o *BookTicker) SetAskQty(v string) {
	o.AskQty = v
}

func (o BookTicker) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["bidPrice"] = o.BidPrice
	}
	if true {
		toSerialize["bidQty"] = o.BidQty
	}
	if true {
		toSerialize["askPrice"] = o.AskPrice
	}
	if true {
		toSerialize["askQty"] = o.AskQty
	}
	return json.Marshal(toSerialize)
}

type NullableBookTicker struct {
	value *BookTicker
	isSet bool
}

func (v NullableBookTicker) Get() *BookTicker {
	return v.value
}

func (v *NullableBookTicker) Set(val *BookTicker) {
	v.value = val
	v.isSet = true
}

func (v NullableBookTicker) IsSet() bool {
	return v.isSet
}

func (v *NullableBookTicker) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookTicker(val *BookTicker) *NullableBookTicker {
	return &NullableBookTicker{value: val, isSet: true}
}

func (v NullableBookTicker) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookTicker) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


