/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binanceapi

import (
	"encoding/json"
)

// InlineResponse20092DataProfitTransferDetails struct for InlineResponse20092DataProfitTransferDetails
type InlineResponse20092DataProfitTransferDetails struct {
	// Transfer out of sub-account
	PoolUsername string `json:"poolUsername"`
	// Transfer into subaccount
	ToPoolUsername string `json:"toPoolUsername"`
	// Transfer algorithm
	AlgoName string `json:"algoName"`
	// Transferred Hashrate quantity
	HashRate int64 `json:"hashRate"`
	// Transfer date
	Day int64 `json:"day"`
	// Transfer income
	Amount float64 `json:"amount"`
	CoinName string `json:"coinName"`
}

// NewInlineResponse20092DataProfitTransferDetails instantiates a new InlineResponse20092DataProfitTransferDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20092DataProfitTransferDetails(poolUsername string, toPoolUsername string, algoName string, hashRate int64, day int64, amount float64, coinName string) *InlineResponse20092DataProfitTransferDetails {
	this := InlineResponse20092DataProfitTransferDetails{}
	this.PoolUsername = poolUsername
	this.ToPoolUsername = toPoolUsername
	this.AlgoName = algoName
	this.HashRate = hashRate
	this.Day = day
	this.Amount = amount
	this.CoinName = coinName
	return &this
}

// NewInlineResponse20092DataProfitTransferDetailsWithDefaults instantiates a new InlineResponse20092DataProfitTransferDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20092DataProfitTransferDetailsWithDefaults() *InlineResponse20092DataProfitTransferDetails {
	this := InlineResponse20092DataProfitTransferDetails{}
	return &this
}

// GetPoolUsername returns the PoolUsername field value
func (o *InlineResponse20092DataProfitTransferDetails) GetPoolUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PoolUsername
}

// GetPoolUsernameOk returns a tuple with the PoolUsername field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20092DataProfitTransferDetails) GetPoolUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PoolUsername, true
}

// SetPoolUsername sets field value
func (o *InlineResponse20092DataProfitTransferDetails) SetPoolUsername(v string) {
	o.PoolUsername = v
}

// GetToPoolUsername returns the ToPoolUsername field value
func (o *InlineResponse20092DataProfitTransferDetails) GetToPoolUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToPoolUsername
}

// GetToPoolUsernameOk returns a tuple with the ToPoolUsername field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20092DataProfitTransferDetails) GetToPoolUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ToPoolUsername, true
}

// SetToPoolUsername sets field value
func (o *InlineResponse20092DataProfitTransferDetails) SetToPoolUsername(v string) {
	o.ToPoolUsername = v
}

// GetAlgoName returns the AlgoName field value
func (o *InlineResponse20092DataProfitTransferDetails) GetAlgoName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AlgoName
}

// GetAlgoNameOk returns a tuple with the AlgoName field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20092DataProfitTransferDetails) GetAlgoNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AlgoName, true
}

// SetAlgoName sets field value
func (o *InlineResponse20092DataProfitTransferDetails) SetAlgoName(v string) {
	o.AlgoName = v
}

// GetHashRate returns the HashRate field value
func (o *InlineResponse20092DataProfitTransferDetails) GetHashRate() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.HashRate
}

// GetHashRateOk returns a tuple with the HashRate field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20092DataProfitTransferDetails) GetHashRateOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HashRate, true
}

// SetHashRate sets field value
func (o *InlineResponse20092DataProfitTransferDetails) SetHashRate(v int64) {
	o.HashRate = v
}

// GetDay returns the Day field value
func (o *InlineResponse20092DataProfitTransferDetails) GetDay() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Day
}

// GetDayOk returns a tuple with the Day field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20092DataProfitTransferDetails) GetDayOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Day, true
}

// SetDay sets field value
func (o *InlineResponse20092DataProfitTransferDetails) SetDay(v int64) {
	o.Day = v
}

// GetAmount returns the Amount field value
func (o *InlineResponse20092DataProfitTransferDetails) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20092DataProfitTransferDetails) GetAmountOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *InlineResponse20092DataProfitTransferDetails) SetAmount(v float64) {
	o.Amount = v
}

// GetCoinName returns the CoinName field value
func (o *InlineResponse20092DataProfitTransferDetails) GetCoinName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CoinName
}

// GetCoinNameOk returns a tuple with the CoinName field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20092DataProfitTransferDetails) GetCoinNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CoinName, true
}

// SetCoinName sets field value
func (o *InlineResponse20092DataProfitTransferDetails) SetCoinName(v string) {
	o.CoinName = v
}

func (o InlineResponse20092DataProfitTransferDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["poolUsername"] = o.PoolUsername
	}
	if true {
		toSerialize["toPoolUsername"] = o.ToPoolUsername
	}
	if true {
		toSerialize["algoName"] = o.AlgoName
	}
	if true {
		toSerialize["hashRate"] = o.HashRate
	}
	if true {
		toSerialize["day"] = o.Day
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["coinName"] = o.CoinName
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20092DataProfitTransferDetails struct {
	value *InlineResponse20092DataProfitTransferDetails
	isSet bool
}

func (v NullableInlineResponse20092DataProfitTransferDetails) Get() *InlineResponse20092DataProfitTransferDetails {
	return v.value
}

func (v *NullableInlineResponse20092DataProfitTransferDetails) Set(val *InlineResponse20092DataProfitTransferDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20092DataProfitTransferDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20092DataProfitTransferDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20092DataProfitTransferDetails(val *InlineResponse20092DataProfitTransferDetails) *NullableInlineResponse20092DataProfitTransferDetails {
	return &NullableInlineResponse20092DataProfitTransferDetails{value: val, isSet: true}
}

func (v NullableInlineResponse20092DataProfitTransferDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20092DataProfitTransferDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


