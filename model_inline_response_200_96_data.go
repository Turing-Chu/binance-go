/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binanceapi

import (
	"encoding/json"
)

// InlineResponse20096Data struct for InlineResponse20096Data
type InlineResponse20096Data struct {
	Type string `json:"type"`
	UserName string `json:"userName"`
	List []InlineResponse20096List `json:"list"`
}

// NewInlineResponse20096Data instantiates a new InlineResponse20096Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20096Data(type_ string, userName string, list []InlineResponse20096List) *InlineResponse20096Data {
	this := InlineResponse20096Data{}
	this.Type = type_
	this.UserName = userName
	this.List = list
	return &this
}

// NewInlineResponse20096DataWithDefaults instantiates a new InlineResponse20096Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20096DataWithDefaults() *InlineResponse20096Data {
	this := InlineResponse20096Data{}
	return &this
}

// GetType returns the Type field value
func (o *InlineResponse20096Data) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20096Data) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InlineResponse20096Data) SetType(v string) {
	o.Type = v
}

// GetUserName returns the UserName field value
func (o *InlineResponse20096Data) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20096Data) GetUserNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *InlineResponse20096Data) SetUserName(v string) {
	o.UserName = v
}

// GetList returns the List field value
func (o *InlineResponse20096Data) GetList() []InlineResponse20096List {
	if o == nil {
		var ret []InlineResponse20096List
		return ret
	}

	return o.List
}

// GetListOk returns a tuple with the List field value
// and a boolean to check if the value has been set.
func (o *InlineResponse20096Data) GetListOk() (*[]InlineResponse20096List, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.List, true
}

// SetList sets field value
func (o *InlineResponse20096Data) SetList(v []InlineResponse20096List) {
	o.List = v
}

func (o InlineResponse20096Data) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["userName"] = o.UserName
	}
	if true {
		toSerialize["list"] = o.List
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20096Data struct {
	value *InlineResponse20096Data
	isSet bool
}

func (v NullableInlineResponse20096Data) Get() *InlineResponse20096Data {
	return v.value
}

func (v *NullableInlineResponse20096Data) Set(val *InlineResponse20096Data) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20096Data) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20096Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20096Data(val *InlineResponse20096Data) *NullableInlineResponse20096Data {
	return &NullableInlineResponse20096Data{value: val, isSet: true}
}

func (v NullableInlineResponse20096Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20096Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


