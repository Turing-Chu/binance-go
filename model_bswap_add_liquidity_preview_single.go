/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binanceapi

import (
	"encoding/json"
)

// BswapAddLiquidityPreviewSingle struct for BswapAddLiquidityPreviewSingle
type BswapAddLiquidityPreviewSingle struct {
	QuoteAsset string `json:"quoteAsset"`
	QuoteAmt int64 `json:"quoteAmt"`
	Price float64 `json:"price"`
	Share float64 `json:"share"`
	Slippage float64 `json:"slippage"`
	Fee float64 `json:"fee"`
}

// NewBswapAddLiquidityPreviewSingle instantiates a new BswapAddLiquidityPreviewSingle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBswapAddLiquidityPreviewSingle(quoteAsset string, quoteAmt int64, price float64, share float64, slippage float64, fee float64) *BswapAddLiquidityPreviewSingle {
	this := BswapAddLiquidityPreviewSingle{}
	this.QuoteAsset = quoteAsset
	this.QuoteAmt = quoteAmt
	this.Price = price
	this.Share = share
	this.Slippage = slippage
	this.Fee = fee
	return &this
}

// NewBswapAddLiquidityPreviewSingleWithDefaults instantiates a new BswapAddLiquidityPreviewSingle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBswapAddLiquidityPreviewSingleWithDefaults() *BswapAddLiquidityPreviewSingle {
	this := BswapAddLiquidityPreviewSingle{}
	return &this
}

// GetQuoteAsset returns the QuoteAsset field value
func (o *BswapAddLiquidityPreviewSingle) GetQuoteAsset() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteAsset
}

// GetQuoteAssetOk returns a tuple with the QuoteAsset field value
// and a boolean to check if the value has been set.
func (o *BswapAddLiquidityPreviewSingle) GetQuoteAssetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.QuoteAsset, true
}

// SetQuoteAsset sets field value
func (o *BswapAddLiquidityPreviewSingle) SetQuoteAsset(v string) {
	o.QuoteAsset = v
}

// GetQuoteAmt returns the QuoteAmt field value
func (o *BswapAddLiquidityPreviewSingle) GetQuoteAmt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.QuoteAmt
}

// GetQuoteAmtOk returns a tuple with the QuoteAmt field value
// and a boolean to check if the value has been set.
func (o *BswapAddLiquidityPreviewSingle) GetQuoteAmtOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.QuoteAmt, true
}

// SetQuoteAmt sets field value
func (o *BswapAddLiquidityPreviewSingle) SetQuoteAmt(v int64) {
	o.QuoteAmt = v
}

// GetPrice returns the Price field value
func (o *BswapAddLiquidityPreviewSingle) GetPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *BswapAddLiquidityPreviewSingle) GetPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *BswapAddLiquidityPreviewSingle) SetPrice(v float64) {
	o.Price = v
}

// GetShare returns the Share field value
func (o *BswapAddLiquidityPreviewSingle) GetShare() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Share
}

// GetShareOk returns a tuple with the Share field value
// and a boolean to check if the value has been set.
func (o *BswapAddLiquidityPreviewSingle) GetShareOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Share, true
}

// SetShare sets field value
func (o *BswapAddLiquidityPreviewSingle) SetShare(v float64) {
	o.Share = v
}

// GetSlippage returns the Slippage field value
func (o *BswapAddLiquidityPreviewSingle) GetSlippage() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Slippage
}

// GetSlippageOk returns a tuple with the Slippage field value
// and a boolean to check if the value has been set.
func (o *BswapAddLiquidityPreviewSingle) GetSlippageOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Slippage, true
}

// SetSlippage sets field value
func (o *BswapAddLiquidityPreviewSingle) SetSlippage(v float64) {
	o.Slippage = v
}

// GetFee returns the Fee field value
func (o *BswapAddLiquidityPreviewSingle) GetFee() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *BswapAddLiquidityPreviewSingle) GetFeeOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *BswapAddLiquidityPreviewSingle) SetFee(v float64) {
	o.Fee = v
}

func (o BswapAddLiquidityPreviewSingle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["quoteAsset"] = o.QuoteAsset
	}
	if true {
		toSerialize["quoteAmt"] = o.QuoteAmt
	}
	if true {
		toSerialize["price"] = o.Price
	}
	if true {
		toSerialize["share"] = o.Share
	}
	if true {
		toSerialize["slippage"] = o.Slippage
	}
	if true {
		toSerialize["fee"] = o.Fee
	}
	return json.Marshal(toSerialize)
}

type NullableBswapAddLiquidityPreviewSingle struct {
	value *BswapAddLiquidityPreviewSingle
	isSet bool
}

func (v NullableBswapAddLiquidityPreviewSingle) Get() *BswapAddLiquidityPreviewSingle {
	return v.value
}

func (v *NullableBswapAddLiquidityPreviewSingle) Set(val *BswapAddLiquidityPreviewSingle) {
	v.value = val
	v.isSet = true
}

func (v NullableBswapAddLiquidityPreviewSingle) IsSet() bool {
	return v.isSet
}

func (v *NullableBswapAddLiquidityPreviewSingle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBswapAddLiquidityPreviewSingle(val *BswapAddLiquidityPreviewSingle) *NullableBswapAddLiquidityPreviewSingle {
	return &NullableBswapAddLiquidityPreviewSingle{value: val, isSet: true}
}

func (v NullableBswapAddLiquidityPreviewSingle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBswapAddLiquidityPreviewSingle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


