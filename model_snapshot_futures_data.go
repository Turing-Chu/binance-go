/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API generated with [binance/binance-api-swagger/blob/master/spot_api.yaml](https://github.com/binance/binance-api-swagger/blob/master/spot_api.yaml) with commit [v1.2.0 release](https://github.com/binance/binance-api-swagger/commit/60d14be031c031600c853d5cdab86db5ab73603e)  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
Contact: qishiwenjun@163.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binanceapi

import (
	"encoding/json"
)

// SnapshotFuturesData struct for SnapshotFuturesData
type SnapshotFuturesData struct {
	Assets   []SnapshotFuturesDataAssets   `json:"assets"`
	Position []SnapshotFuturesDataPosition `json:"position"`
}

// NewSnapshotFuturesData instantiates a new SnapshotFuturesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotFuturesData(assets []SnapshotFuturesDataAssets, position []SnapshotFuturesDataPosition) *SnapshotFuturesData {
	this := SnapshotFuturesData{}
	this.Assets = assets
	this.Position = position
	return &this
}

// NewSnapshotFuturesDataWithDefaults instantiates a new SnapshotFuturesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotFuturesDataWithDefaults() *SnapshotFuturesData {
	this := SnapshotFuturesData{}
	return &this
}

// GetAssets returns the Assets field value
func (o *SnapshotFuturesData) GetAssets() []SnapshotFuturesDataAssets {
	if o == nil {
		var ret []SnapshotFuturesDataAssets
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *SnapshotFuturesData) GetAssetsOk() (*[]SnapshotFuturesDataAssets, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assets, true
}

// SetAssets sets field value
func (o *SnapshotFuturesData) SetAssets(v []SnapshotFuturesDataAssets) {
	o.Assets = v
}

// GetPosition returns the Position field value
func (o *SnapshotFuturesData) GetPosition() []SnapshotFuturesDataPosition {
	if o == nil {
		var ret []SnapshotFuturesDataPosition
		return ret
	}

	return o.Position
}

// GetPositionOk returns a tuple with the Position field value
// and a boolean to check if the value has been set.
func (o *SnapshotFuturesData) GetPositionOk() (*[]SnapshotFuturesDataPosition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Position, true
}

// SetPosition sets field value
func (o *SnapshotFuturesData) SetPosition(v []SnapshotFuturesDataPosition) {
	o.Position = v
}

func (o SnapshotFuturesData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["assets"] = o.Assets
	}
	if true {
		toSerialize["position"] = o.Position
	}
	return json.Marshal(toSerialize)
}

type NullableSnapshotFuturesData struct {
	value *SnapshotFuturesData
	isSet bool
}

func (v NullableSnapshotFuturesData) Get() *SnapshotFuturesData {
	return v.value
}

func (v *NullableSnapshotFuturesData) Set(val *SnapshotFuturesData) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotFuturesData) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotFuturesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotFuturesData(val *SnapshotFuturesData) *NullableSnapshotFuturesData {
	return &NullableSnapshotFuturesData{value: val, isSet: true}
}

func (v NullableSnapshotFuturesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotFuturesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
