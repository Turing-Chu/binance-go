/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package binanceapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// C2CApiService C2CApi service
type C2CApiService service

type ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest struct {
	ctx _context.Context
	ApiService *C2CApiService
	timestamp *int64
	signature *string
	tradeType *string
	startTimestamp *int64
	endTimestamp *int64
	page *int32
	rows *int32
	recvWindow *int64
}

// UTC timestamp in ms
func (r ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest) Timestamp(timestamp int64) ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest {
	r.timestamp = &timestamp
	return r
}
// Signature
func (r ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest) Signature(signature string) ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest {
	r.signature = &signature
	return r
}
func (r ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest) TradeType(tradeType string) ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest {
	r.tradeType = &tradeType
	return r
}
// UTC timestamp in ms
func (r ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest) StartTimestamp(startTimestamp int64) ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest {
	r.startTimestamp = &startTimestamp
	return r
}
// UTC timestamp in ms
func (r ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest) EndTimestamp(endTimestamp int64) ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest {
	r.endTimestamp = &endTimestamp
	return r
}
// Default 1
func (r ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest) Page(page int32) ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest {
	r.page = &page
	return r
}
// default 100, max 100
func (r ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest) Rows(rows int32) ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest {
	r.rows = &rows
	return r
}
// The value cannot be greater than 60000
func (r ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest) RecvWindow(recvWindow int64) ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest {
	r.recvWindow = &recvWindow
	return r
}

func (r ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest) Execute() (InlineResponse200111, *_nethttp.Response, error) {
	return r.ApiService.SapiV1C2cOrderMatchListUserOrderHistoryGetExecute(r)
}

/*
SapiV1C2cOrderMatchListUserOrderHistoryGet Get C2C Trade History (USER_DATA)

- If startTimestamp and endTimestamp are not sent, the recent 30-day data will be returned.
- The max interval between startTimestamp and endTimestamp is 30 days.

Weight(IP): 1

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest
*/
func (a *C2CApiService) SapiV1C2cOrderMatchListUserOrderHistoryGet(ctx _context.Context) ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest {
	return ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InlineResponse200111
func (a *C2CApiService) SapiV1C2cOrderMatchListUserOrderHistoryGetExecute(r ApiSapiV1C2cOrderMatchListUserOrderHistoryGetRequest) (InlineResponse200111, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse200111
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "C2CApiService.SapiV1C2cOrderMatchListUserOrderHistoryGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sapi/v1/c2c/orderMatch/listUserOrderHistory"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.timestamp == nil {
		return localVarReturnValue, nil, reportError("timestamp is required and must be specified")
	}
	if r.signature == nil {
		return localVarReturnValue, nil, reportError("signature is required and must be specified")
	}

	if r.tradeType != nil {
		localVarQueryParams.Add("tradeType", parameterToString(*r.tradeType, ""))
	}
	if r.startTimestamp != nil {
		localVarQueryParams.Add("startTimestamp", parameterToString(*r.startTimestamp, ""))
	}
	if r.endTimestamp != nil {
		localVarQueryParams.Add("endTimestamp", parameterToString(*r.endTimestamp, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.rows != nil {
		localVarQueryParams.Add("rows", parameterToString(*r.rows, ""))
	}
	if r.recvWindow != nil {
		localVarQueryParams.Add("recvWindow", parameterToString(*r.recvWindow, ""))
	}
	localVarQueryParams.Add("timestamp", parameterToString(*r.timestamp, ""))
	localVarQueryParams.Add("signature", parameterToString(*r.signature, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-MBX-APIKEY"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
