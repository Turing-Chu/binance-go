/*
Binance Public Spot API

OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2008 struct for InlineResponse2008
type InlineResponse2008 struct {
	RateLimitType string `json:"rateLimitType"`
	Interval string `json:"interval"`
	IntervalNum int32 `json:"intervalNum"`
	Limit int32 `json:"limit"`
	Count *int32 `json:"count,omitempty"`
}

// NewInlineResponse2008 instantiates a new InlineResponse2008 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2008(rateLimitType string, interval string, intervalNum int32, limit int32) *InlineResponse2008 {
	this := InlineResponse2008{}
	this.RateLimitType = rateLimitType
	this.Interval = interval
	this.IntervalNum = intervalNum
	this.Limit = limit
	return &this
}

// NewInlineResponse2008WithDefaults instantiates a new InlineResponse2008 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2008WithDefaults() *InlineResponse2008 {
	this := InlineResponse2008{}
	return &this
}

// GetRateLimitType returns the RateLimitType field value
func (o *InlineResponse2008) GetRateLimitType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RateLimitType
}

// GetRateLimitTypeOk returns a tuple with the RateLimitType field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetRateLimitTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RateLimitType, true
}

// SetRateLimitType sets field value
func (o *InlineResponse2008) SetRateLimitType(v string) {
	o.RateLimitType = v
}

// GetInterval returns the Interval field value
func (o *InlineResponse2008) GetInterval() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetIntervalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *InlineResponse2008) SetInterval(v string) {
	o.Interval = v
}

// GetIntervalNum returns the IntervalNum field value
func (o *InlineResponse2008) GetIntervalNum() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IntervalNum
}

// GetIntervalNumOk returns a tuple with the IntervalNum field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetIntervalNumOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IntervalNum, true
}

// SetIntervalNum sets field value
func (o *InlineResponse2008) SetIntervalNum(v int32) {
	o.IntervalNum = v
}

// GetLimit returns the Limit field value
func (o *InlineResponse2008) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetLimitOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *InlineResponse2008) SetLimit(v int32) {
	o.Limit = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *InlineResponse2008) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *InlineResponse2008) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *InlineResponse2008) SetCount(v int32) {
	o.Count = &v
}

func (o InlineResponse2008) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["rateLimitType"] = o.RateLimitType
	}
	if true {
		toSerialize["interval"] = o.Interval
	}
	if true {
		toSerialize["intervalNum"] = o.IntervalNum
	}
	if true {
		toSerialize["limit"] = o.Limit
	}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2008 struct {
	value *InlineResponse2008
	isSet bool
}

func (v NullableInlineResponse2008) Get() *InlineResponse2008 {
	return v.value
}

func (v *NullableInlineResponse2008) Set(val *InlineResponse2008) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2008) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2008) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2008(val *InlineResponse2008) *NullableInlineResponse2008 {
	return &NullableInlineResponse2008{value: val, isSet: true}
}

func (v NullableInlineResponse2008) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2008) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


